
Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e90  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b47  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063d  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bb  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_17>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	60 01       	movw	r12, r0
  b6:	67 01       	movw	r12, r14
  b8:	6e 01       	movw	r12, r28
  ba:	78 01       	movw	r14, r16
  bc:	82 01       	movw	r16, r4
  be:	8c 01       	movw	r16, r24
  c0:	96 01       	movw	r18, r12

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	f3 e0       	ldi	r31, 0x03	; 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a8 30       	cpi	r26, 0x08	; 8
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a8 e0       	ldi	r26, 0x08	; 8
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ac 30       	cpi	r26, 0x0C	; 12
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  f8:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_init>:
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	80 83       	st	Z, r24
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
 126:	80 81       	ld	r24, Z
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 83       	st	Z, r24
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <ADC_read>:
 134:	87 70       	andi	r24, 0x07	; 7
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	89 2b       	or	r24, r25
 140:	80 83       	st	Z, r24
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
 14c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 150:	86 fd       	sbrc	r24, 6
 152:	fc cf       	rjmp	.-8      	; 0x14c <ADC_read+0x18>
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15c:	08 95       	ret

0000015e <main>:
unsigned char pines[8] = {0, 1, 2, 3, 4, 5, 6, 7};  // PD0 a PD7

int main(void)
{
	// Desactiva la UART (TX y RX), si estaba habilitada
	UCSR0B &= ~((1 << TXEN0) | (1 << RXEN0));
 15e:	e1 ec       	ldi	r30, 0xC1	; 193
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	87 7e       	andi	r24, 0xE7	; 231
 166:	80 83       	st	Z, r24

	// Configura todos los pines del puerto D como salidas para los LEDs
	DDRD |= 0xFF;
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;  // Inicializa todos los pines en bajo (LEDs apagados)
 16e:	1b b8       	out	0x0b, r1	; 11

	// Inicializa SPI en modo esclavo, MSB primero, reloj en reposo alto, datos en primer flanco
	SPI_init(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_HIGH, SPI_CLOCK_FIRST_EDGE);
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	48 e0       	ldi	r20, 0x08	; 8
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	0e 94 48 01 	call	0x290	; 0x290 <SPI_init>

	// Habilita la interrupción por SPI (cuando se recibe un dato)
	SPCR0 |= (1<<SPIE);
 17c:	8c b5       	in	r24, 0x2c	; 44
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	8c bd       	out	0x2c, r24	; 44

	// Inicializa el convertidor analógico a digital
	ADC_init();
 182:	0e 94 80 00 	call	0x100	; 0x100 <ADC_init>

	// Habilita las interrupciones globales
	sei();
 186:	78 94       	sei

	while (1)
	{
		// Lee valores de los potenciómetros en A6 y A7 continuamente
		val1 = ADC_read(6); // Canal A6
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 18e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <val1+0x1>
 192:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <val1>
		val2 = ADC_read(7); // Canal A7
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 19c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	81 ee       	ldi	r24, 0xE1	; 225
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x4c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x56>
 1b4:	00 00       	nop
 1b6:	e8 cf       	rjmp	.-48     	; 0x188 <main+0x2a>

000001b8 <LEDS_PORT>:
	}
}

// Función para encender/apagar LEDs conectados a PORTD según una máscara de bits
void LEDS_PORT(uint8_t mascara) {
	for(int i = 0; i < 8; i++) {  // Recorre los 8 bits del byte
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	26 c0       	rjmp	.+76     	; 0x20a <LEDS_PORT+0x52>
		uint8_t pin = pines[i];   // Obtiene el número de pin asociado
 1be:	f9 01       	movw	r30, r18
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	60 81       	ld	r22, Z
		if(mascara & (1 << i)) {  // Si el bit i está en 1
 1c6:	48 2f       	mov	r20, r24
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <LEDS_PORT+0x1a>
 1ce:	55 95       	asr	r21
 1d0:	47 95       	ror	r20
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <LEDS_PORT+0x16>
 1d6:	40 ff       	sbrs	r20, 0
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <LEDS_PORT+0x38>
			PORTD |= (1 << pin);  // Enciende el LED correspondiente
 1da:	9b b1       	in	r25, 0x0b	; 11
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <LEDS_PORT+0x2e>
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <LEDS_PORT+0x2a>
 1ea:	49 2b       	or	r20, r25
 1ec:	4b b9       	out	0x0b, r20	; 11
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <LEDS_PORT+0x4e>
			} else {
			PORTD &= ~(1 << pin); // Apaga el LED correspondiente
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <LEDS_PORT+0x44>
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <LEDS_PORT+0x40>
 200:	40 95       	com	r20
 202:	49 23       	and	r20, r25
 204:	4b b9       	out	0x0b, r20	; 11
	}
}

// Función para encender/apagar LEDs conectados a PORTD según una máscara de bits
void LEDS_PORT(uint8_t mascara) {
	for(int i = 0; i < 8; i++) {  // Recorre los 8 bits del byte
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	3f 4f       	sbci	r19, 0xFF	; 255
 20a:	28 30       	cpi	r18, 0x08	; 8
 20c:	31 05       	cpc	r19, r1
 20e:	bc f2       	brlt	.-82     	; 0x1be <LEDS_PORT+0x6>
			PORTD |= (1 << pin);  // Enciende el LED correspondiente
			} else {
			PORTD &= ~(1 << pin); // Apaga el LED correspondiente
		}
	}
}
 210:	08 95       	ret

00000212 <__vector_17>:
		_delay_ms(100);
	}
}

// Interrupción del SPI: se ejecuta cuando se recibe un dato desde el maestro
ISR(SPI0_STC_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	uint8_t spiValor = SPDR0; // Leer el valor recibido del maestro
 234:	8e b5       	in	r24, 0x2e	; 46

	// Si el maestro pide el valor del potenciómetro 1
	if (spiValor == 'a') {
 236:	81 36       	cpi	r24, 0x61	; 97
 238:	51 f4       	brne	.+20     	; 0x24e <__vector_17+0x3c>
		SPDR0 = val1 / 4; // Envía el valor del ADC6 en formato de 8 bits (escala 0-255)
 23a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <val1>
 23e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <val1+0x1>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	8e bd       	out	0x2e, r24	; 46
 24c:	10 c0       	rjmp	.+32     	; 0x26e <__vector_17+0x5c>
	}
	// Si el maestro pide el valor del potenciómetro 2
	else if (spiValor == 'b') {
 24e:	82 36       	cpi	r24, 0x62	; 98
 250:	51 f4       	brne	.+20     	; 0x266 <__vector_17+0x54>
		SPDR0 = val2 / 4; // Envía el valor del ADC7 en formato de 8 bits
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 256:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	8e bd       	out	0x2e, r24	; 46
 264:	04 c0       	rjmp	.+8      	; 0x26e <__vector_17+0x5c>
	}
	else {
		// Si no es 'a' ni 'b', se interpreta como un número para mostrar en LEDs
		LEDS_PORT(spiValor); // Muestra el valor en los LEDs
 266:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDS_PORT>
		SPDR0 = 0xFF;        // Devuelve valor fijo como "ack" (opcional)
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	8e bd       	out	0x2e, r24	; 46
	}
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <SPI_init>:
 290:	e8 2f       	mov	r30, r24
 292:	84 ff       	sbrs	r24, 4
 294:	52 c0       	rjmp	.+164    	; 0x33a <SPI_init+0xaa>
 296:	84 b1       	in	r24, 0x04	; 4
 298:	8c 62       	ori	r24, 0x2C	; 44
 29a:	84 b9       	out	0x04, r24	; 4
 29c:	84 b1       	in	r24, 0x04	; 4
 29e:	8f 7e       	andi	r24, 0xEF	; 239
 2a0:	84 b9       	out	0x04, r24	; 4
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	80 61       	ori	r24, 0x10	; 16
 2a6:	8c bd       	out	0x2c, r24	; 44
 2a8:	e7 70       	andi	r30, 0x07	; 7
 2aa:	8e 2f       	mov	r24, r30
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	87 30       	cpi	r24, 0x07	; 7
 2b0:	91 05       	cpc	r25, r1
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <SPI_init+0x26>
 2b4:	4b c0       	rjmp	.+150    	; 0x34c <SPI_init+0xbc>
 2b6:	fc 01       	movw	r30, r24
 2b8:	e6 5a       	subi	r30, 0xA6	; 166
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__tablejump2__>
 2c0:	8c b5       	in	r24, 0x2c	; 44
 2c2:	8c 7f       	andi	r24, 0xFC	; 252
 2c4:	8c bd       	out	0x2c, r24	; 44
 2c6:	8c b5       	in	r24, 0x2c	; 44
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	8c bd       	out	0x2c, r24	; 44
 2cc:	3f c0       	rjmp	.+126    	; 0x34c <SPI_init+0xbc>
 2ce:	8c b5       	in	r24, 0x2c	; 44
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	8c bd       	out	0x2c, r24	; 44
 2d4:	8d b5       	in	r24, 0x2d	; 45
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	8d bd       	out	0x2d, r24	; 45
 2da:	38 c0       	rjmp	.+112    	; 0x34c <SPI_init+0xbc>
 2dc:	8c b5       	in	r24, 0x2c	; 44
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	8c bd       	out	0x2c, r24	; 44
 2e2:	8c b5       	in	r24, 0x2c	; 44
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	8c bd       	out	0x2c, r24	; 44
 2e8:	8d b5       	in	r24, 0x2d	; 45
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	8d bd       	out	0x2d, r24	; 45
 2ee:	2e c0       	rjmp	.+92     	; 0x34c <SPI_init+0xbc>
 2f0:	8c b5       	in	r24, 0x2c	; 44
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	8c bd       	out	0x2c, r24	; 44
 2f6:	8c b5       	in	r24, 0x2c	; 44
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	8c bd       	out	0x2c, r24	; 44
 2fc:	8c b5       	in	r24, 0x2c	; 44
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	8c bd       	out	0x2c, r24	; 44
 302:	24 c0       	rjmp	.+72     	; 0x34c <SPI_init+0xbc>
 304:	8c b5       	in	r24, 0x2c	; 44
 306:	8e 7f       	andi	r24, 0xFE	; 254
 308:	8c bd       	out	0x2c, r24	; 44
 30a:	8c b5       	in	r24, 0x2c	; 44
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	8c bd       	out	0x2c, r24	; 44
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	81 60       	ori	r24, 0x01	; 1
 314:	8c bd       	out	0x2c, r24	; 44
 316:	1a c0       	rjmp	.+52     	; 0x34c <SPI_init+0xbc>
 318:	8c b5       	in	r24, 0x2c	; 44
 31a:	8e 7f       	andi	r24, 0xFE	; 254
 31c:	8c bd       	out	0x2c, r24	; 44
 31e:	8c b5       	in	r24, 0x2c	; 44
 320:	82 60       	ori	r24, 0x02	; 2
 322:	8c bd       	out	0x2c, r24	; 44
 324:	8d b5       	in	r24, 0x2d	; 45
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	8d bd       	out	0x2d, r24	; 45
 32a:	10 c0       	rjmp	.+32     	; 0x34c <SPI_init+0xbc>
 32c:	8c b5       	in	r24, 0x2c	; 44
 32e:	83 60       	ori	r24, 0x03	; 3
 330:	8c bd       	out	0x2c, r24	; 44
 332:	8d b5       	in	r24, 0x2d	; 45
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	8d bd       	out	0x2d, r24	; 45
 338:	09 c0       	rjmp	.+18     	; 0x34c <SPI_init+0xbc>
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	84 b9       	out	0x04, r24	; 4
 340:	84 b1       	in	r24, 0x04	; 4
 342:	83 7d       	andi	r24, 0xD3	; 211
 344:	84 b9       	out	0x04, r24	; 4
 346:	8c b5       	in	r24, 0x2c	; 44
 348:	8f 7e       	andi	r24, 0xEF	; 239
 34a:	8c bd       	out	0x2c, r24	; 44
 34c:	8c b5       	in	r24, 0x2c	; 44
 34e:	46 2b       	or	r20, r22
 350:	24 2b       	or	r18, r20
 352:	28 2b       	or	r18, r24
 354:	20 64       	ori	r18, 0x40	; 64
 356:	2c bd       	out	0x2c, r18	; 44
 358:	08 95       	ret

0000035a <__tablejump2__>:
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	05 90       	lpm	r0, Z+
 360:	f4 91       	lpm	r31, Z
 362:	e0 2d       	mov	r30, r0
 364:	09 94       	ijmp

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
