
Esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2a  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0f  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000279  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002d86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_17>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	2f 01       	movw	r4, r30
  b6:	36 01       	movw	r6, r12
  b8:	3d 01       	movw	r6, r26
  ba:	47 01       	movw	r8, r14
  bc:	51 01       	movw	r10, r2
  be:	5b 01       	movw	r10, r22
  c0:	65 01       	movw	r12, r10

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ec e0       	ldi	r30, 0x0C	; 12
  d6:	f3 e0       	ldi	r31, 0x03	; 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 30       	cpi	r26, 0x00	; 0
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a4 30       	cpi	r26, 0x04	; 4
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  f8:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_init>:
#include "ADC.h"


void ADC_init(void)
{
	ADMUX |=  (1<<REFS0);		//Seleccionar el voltaje de referencia
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
 10a:	80 81       	ld	r24, Z
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	80 83       	st	Z, r24
	ADMUX &=~ (1<<ADLAR);		//Ajustar el resultado
 110:	80 81       	ld	r24, Z
 112:	8f 7d       	andi	r24, 0xDF	; 223
 114:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADPS0);		// divisor = 128  16000/128 = 125 KHz
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
 126:	80 81       	ld	r24, Z
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);		// Encendemos en ADC
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <ADC_read>:
}


uint16_t ADC_read(uint8_t canal)
{
	canal &= 0b00000111;            // Limitar la entrada a canales 0-7 (la mayoría de AVR tienen 8 canales ADC)
 134:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF0) | canal; // Conservar los 4 bits superiores (config) y establecer los bits de selección de canal
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	89 2b       	or	r24, r25
 140:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);            // Inicia la conversión
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));      // Esperar hasta que se complete la conversión
 14c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 150:	86 fd       	sbrc	r24, 6
 152:	fc cf       	rjmp	.-8      	; 0x14c <ADC_read+0x18>
	return ADC;                     // Devolver el valor del ADC
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15c:	08 95       	ret

0000015e <main>:

unsigned char pines[8] = {2, 3, 4, 5, 6, 7, 8, 9};

int main(void)
{
	DDRD |= (1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7);
 15e:	8a b1       	in	r24, 0x0a	; 10
 160:	8c 6f       	ori	r24, 0xFC	; 252
 162:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<0)|(1<<1);
 164:	84 b1       	in	r24, 0x04	; 4
 166:	83 60       	ori	r24, 0x03	; 3
 168:	84 b9       	out	0x04, r24	; 4
	PORTD = 0;
 16a:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
 16c:	15 b8       	out	0x05, r1	; 5
	
	
	SPI_init(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_HIGH, SPI_CLOCK_FIRST_EDGE);
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	48 e0       	ldi	r20, 0x08	; 8
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	0e 94 17 01 	call	0x22e	; 0x22e <SPI_init>
	SPCR0 |= (1<<SPIE);
 17a:	8c b5       	in	r24, 0x2c	; 44
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8c bd       	out	0x2c, r24	; 44
	ADC_init();
 180:	0e 94 80 00 	call	0x100	; 0x100 <ADC_init>
	sei();
 184:	78 94       	sei
	
    while (1) 
    {
		val1 = ADC_read(6);
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 18c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val1+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val1>
		val2 = ADC_read(7);
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x4a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x54>
 1b2:	00 00       	nop
 1b4:	e8 cf       	rjmp	.-48     	; 0x186 <main+0x28>

000001b6 <__vector_17>:

    }
}


ISR(SPI0_STC_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	uint8_t spiValor = SPDR0;
 1d8:	8e b5       	in	r24, 0x2e	; 46
	if (spiValor == 'a')
 1da:	81 36       	cpi	r24, 0x61	; 97
 1dc:	59 f4       	brne	.+22     	; 0x1f4 <__vector_17+0x3e>
	{
		SPI_Write(val1/4);
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val1>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val1+0x1>
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_Write>
 1f2:	0c c0       	rjmp	.+24     	; 0x20c <__vector_17+0x56>
	}
	else if (spiValor == 'b')
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	51 f4       	brne	.+20     	; 0x20c <__vector_17+0x56>
	{
		SPI_Write(val2/4);
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_Write>
	}

}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <SPI_init>:
#include <stdint.h>

#include "SPI.h"


void SPI_init(type sType, data_order sDataOrder, clock_polar sClockPolar, clock_phase sClockPhase){
 22e:	e8 2f       	mov	r30, r24
	if (sType&0b00010000){
 230:	84 ff       	sbrs	r24, 4
 232:	52 c0       	rjmp	.+164    	; 0x2d8 <SPI_init+0xaa>
		DDRB |= (1<<3)|(1<<5)|(1<<2); // MOSI, SCK, SS
 234:	84 b1       	in	r24, 0x04	; 4
 236:	8c 62       	ori	r24, 0x2C	; 44
 238:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<4); // MISO
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	8f 7e       	andi	r24, 0xEF	; 239
 23e:	84 b9       	out	0x04, r24	; 4
		SPCR0 |= (1<<MSTR); // MASTER
 240:	8c b5       	in	r24, 0x2c	; 44
 242:	80 61       	ori	r24, 0x10	; 16
 244:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t val = sType & 0b00000111;
 246:	e7 70       	andi	r30, 0x07	; 7
		switch(val){
 248:	8e 2f       	mov	r24, r30
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	87 30       	cpi	r24, 0x07	; 7
 24e:	91 05       	cpc	r25, r1
 250:	08 f0       	brcs	.+2      	; 0x254 <SPI_init+0x26>
 252:	4b c0       	rjmp	.+150    	; 0x2ea <SPI_init+0xbc>
 254:	fc 01       	movw	r30, r24
 256:	e6 5a       	subi	r30, 0xA6	; 166
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__tablejump2__>
			case 0:
			SPCR0 &= ~((1<<SPR1)|(1<<SPR0));
 25e:	8c b5       	in	r24, 0x2c	; 44
 260:	8c 7f       	andi	r24, 0xFC	; 252
 262:	8c bd       	out	0x2c, r24	; 44
			SPCR0 |= (1<<SPI2X);
 264:	8c b5       	in	r24, 0x2c	; 44
 266:	81 60       	ori	r24, 0x01	; 1
 268:	8c bd       	out	0x2c, r24	; 44
			break;
 26a:	3f c0       	rjmp	.+126    	; 0x2ea <SPI_init+0xbc>
			case 1:
			SPCR0 &= ~((1<<SPR1)|(SPR0));
 26c:	8c b5       	in	r24, 0x2c	; 44
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	8c bd       	out	0x2c, r24	; 44
			SPSR0 &= ~(1<<SPI2X);
 272:	8d b5       	in	r24, 0x2d	; 45
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	8d bd       	out	0x2d, r24	; 45
			break;
 278:	38 c0       	rjmp	.+112    	; 0x2ea <SPI_init+0xbc>
			case 2:
			SPCR0 |= (1<<SPR0);
 27a:	8c b5       	in	r24, 0x2c	; 44
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	8c bd       	out	0x2c, r24	; 44
			SPCR0 &= ~(1<<SPR1);
 280:	8c b5       	in	r24, 0x2c	; 44
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	8c bd       	out	0x2c, r24	; 44
			SPSR0 |= (1<<SPI2X);
 286:	8d b5       	in	r24, 0x2d	; 45
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	8d bd       	out	0x2d, r24	; 45
			break;
 28c:	2e c0       	rjmp	.+92     	; 0x2ea <SPI_init+0xbc>
			case 3:
			SPCR0 |= (1<<SPR0);
 28e:	8c b5       	in	r24, 0x2c	; 44
 290:	81 60       	ori	r24, 0x01	; 1
 292:	8c bd       	out	0x2c, r24	; 44
			SPCR0 &= ~(1<<SPR1);
 294:	8c b5       	in	r24, 0x2c	; 44
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	8c bd       	out	0x2c, r24	; 44
			SPCR0 &= ~(1<<SPI2X);
 29a:	8c b5       	in	r24, 0x2c	; 44
 29c:	8e 7f       	andi	r24, 0xFE	; 254
 29e:	8c bd       	out	0x2c, r24	; 44
			break;
 2a0:	24 c0       	rjmp	.+72     	; 0x2ea <SPI_init+0xbc>
			case 4:
			SPCR0 &= ~(1<<SPR0);
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	8e 7f       	andi	r24, 0xFE	; 254
 2a6:	8c bd       	out	0x2c, r24	; 44
			SPCR0 |= (1<<SPR1);
 2a8:	8c b5       	in	r24, 0x2c	; 44
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	8c bd       	out	0x2c, r24	; 44
			SPCR0 |= (1<<SPI2X);
 2ae:	8c b5       	in	r24, 0x2c	; 44
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	8c bd       	out	0x2c, r24	; 44
			break;
 2b4:	1a c0       	rjmp	.+52     	; 0x2ea <SPI_init+0xbc>
			case 5:
			SPCR0 &= ~(1<<SPR0);
 2b6:	8c b5       	in	r24, 0x2c	; 44
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	8c bd       	out	0x2c, r24	; 44
			SPCR0 |= (1<<SPR1);
 2bc:	8c b5       	in	r24, 0x2c	; 44
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	8c bd       	out	0x2c, r24	; 44
			SPSR0 &= ~ (1<<SPI2X);
 2c2:	8d b5       	in	r24, 0x2d	; 45
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	8d bd       	out	0x2d, r24	; 45
			
			break;
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <SPI_init+0xbc>
			case 6:
			SPCR0 |= (1<< SPR0)|(1<<SPR1);
 2ca:	8c b5       	in	r24, 0x2c	; 44
 2cc:	83 60       	ori	r24, 0x03	; 3
 2ce:	8c bd       	out	0x2c, r24	; 44
			SPSR0 &= ~(1<<SPI2X);
 2d0:	8d b5       	in	r24, 0x2d	; 45
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	8d bd       	out	0x2d, r24	; 45
			break;
 2d6:	09 c0       	rjmp	.+18     	; 0x2ea <SPI_init+0xbc>
		}
		} else {
		DDRB |= (1<<4);
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	80 61       	ori	r24, 0x10	; 16
 2dc:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<3)|(1<<5)|(1<<2));
 2de:	84 b1       	in	r24, 0x04	; 4
 2e0:	83 7d       	andi	r24, 0xD3	; 211
 2e2:	84 b9       	out	0x04, r24	; 4
		SPCR0 &= ~(1<<MSTR);
 2e4:	8c b5       	in	r24, 0x2c	; 44
 2e6:	8f 7e       	andi	r24, 0xEF	; 239
 2e8:	8c bd       	out	0x2c, r24	; 44
	}
	SPCR0 |= (1<<SPE)|sDataOrder|sClockPolar|sClockPhase;
 2ea:	8c b5       	in	r24, 0x2c	; 44
 2ec:	46 2b       	or	r20, r22
 2ee:	24 2b       	or	r18, r20
 2f0:	28 2b       	or	r18, r24
 2f2:	20 64       	ori	r18, 0x40	; 64
 2f4:	2c bd       	out	0x2c, r18	; 44
 2f6:	08 95       	ret

000002f8 <SPI_Write>:
}

void SPI_Write(uint8_t data){
	SPDR0 = data;
 2f8:	8e bd       	out	0x2e, r24	; 46
 2fa:	08 95       	ret

000002fc <__tablejump2__>:
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	05 90       	lpm	r0, Z+
 302:	f4 91       	lpm	r31, Z
 304:	e0 2d       	mov	r30, r0
 306:	09 94       	ijmp

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
